{"meta":{"version":"1.0.0","format":20,"date":1608158138609},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\r\n\r\n# /create\r\n[![NPM version](https://img.shields.io/npm/v/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![NPM downloads](https://img.shields.io/npm/dt/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![ESLint status](https://github.com/Snazzah/slash-create/workflows/ESLint/badge.svg)](https://github.com/Snazzah/slash-create/actions?query=workflow%3A%22ESLint%22) [![DeepScan grade](https://deepscan.io/api/teams/11596/projects/15103/branches/297399/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=11596&pid=15103&bid=297399)\r\n\r\nCreator and handler for Discord's [slash commands](https://discord.com/developers/docs/interactions/slash-commands).\r\n\r\nYou can create commands similar to Discord.JS [Commando](https://github.com/discordjs/Commando).\r\n\r\n\r\n</div>\r\n\r\n## Features\r\n- Multiple server support (Express, Fastify, etc.)\r\n- Command syncing - Sync commands with your creator automatically.\r\n- Load commands from a folder\r\n- Command throttling/cooldowns\r\n\r\n## Installation\r\n```sh\r\nnpm i slash-create\r\nyarn add slash-create\r\n```\r\n\r\n### Using webservers\r\nIn order to use a specific webserver, you will need to install the dependency associated with that server. The following server types require these dependencies:\r\n- `ExpressServer`: `express`\r\n- `FastifyServer`: `fastify`\r\n- `GatewayServer`: none, see [example](#using-a-discord-bot-with-create)\r\n\r\n## Example\r\n\r\n#### Creating a SlashCreator\r\n```js\r\nconst { Creator } = require('slash-create');\r\nconst creator = new Creator({\r\n  applicationID: '12345678901234567',\r\n  publicKey: 'CLIENT_PUBLIC_KEY',\r\n  token: 'BOT_TOKEN_HERE',\r\n});\r\n```\r\n\r\n#### Adding commands and syncing them\r\n```js\r\nconst path = require('path');\r\n\r\ncreator\r\n    // Registers all of your commands in the ./commands/ directory\r\n    .registerCommandsIn(path.join(__dirname, 'commands'))\r\n    // This will sync commands to Discord, it must be called after commands are loaded.\r\n    // This also returns itself for more chaining capabilities.\r\n    .syncCommands();\r\n```\r\n\r\n#### Adding a webserver\r\n```js\r\nconst { ExpressServer } = require('slash-create');\r\nconst path = require('path');\r\n\r\ncreator\r\n    .withServer(new ExpressServer())\r\n    // Depending on what server is used, this may not be needed.\r\n    .startServer();\r\n\r\n/**\r\n * You can also initialize the server with an existing application.\r\n * If you are doing this with express applications, the express application must already have `express.json()` as middleware.\r\n */\r\n\r\ncreator\r\n    // Set `alreadyListening` if the server has already started.\r\n    .withServer(new ExpressServer(app, { alreadyListening: true }));\r\n```\r\n\r\n#### Using a Discord Bot with /create\r\n```js\r\nconst { GatewayServer } = require('slash-create');\r\nconst Discord = require('discord.js');\r\nconst client = new Discord.Client();\r\n\r\ncreator\r\n  .withServer(\r\n    new GatewayServer(\r\n      (handler) => client.on('raw', (event) => {\r\n        if (event.t === 'INTERACTION_CREATE') handler(event.d);\r\n      })\r\n    )\r\n  );\r\n\r\nclient.login('BOT_TOKEN_HERE');\r\n```\r\n\r\n#### Example Command\r\n```js\r\nconst { Command } = require('slash-create');\r\n\r\nmodule.exports = class HelloCommand extends Command {\r\n  constructor(creator) {\r\n    super(creator, {\r\n      name: 'hello',\r\n      description: 'Says hello to you.'\r\n    });\r\n  }\r\n\r\n  async run(ctx) {\r\n    return `Hello, ${ctx.member.displayName}!`;\r\n  }\r\n}\r\n```\r\n\r\n##### Resources & References\r\nThis project borrows resources and references from the following repositories:\r\n- [dbots.js](https://github.com/dbots-pkg/dbots.js)\r\n- [eris](https://github.com/abalabahaha/eris)\r\n- [discord.js](https://github.com/discordjs/discord.js)\r\n- [Commando](https://github.com/discordjs/Commando)\r\n- [slash-worker](https://github.com/A5rocks/slash-worker)\r\n- [slash-commands](https://github.com/MeguminSama/discord-slash-commands)\r\n- [discord-interactions](https://github.com/discord/discord-interactions-js)\r\n","path":"docs/general/welcome.md"},"changelog":{"name":"Changelog","type":"md","content":"# Changelog\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\r\n\r\n## [Unreleased]\r\n## [1.0.0] - 2020-12-16\r\n### Removed:\r\n- **[BREAKING]** `Context.initialResponseDeleted`\r\n- **[BREAKING]** `treq` parameter from `SlashCreator#ping` event -  The event no longer emits any parameters\r\n### Changed:\r\n- **[BREAKING]** `treq` parameter in `SlashCreator#unknownInteraction` event is now `interaction`\r\n### Added:\r\n- More documentation\r\n- `Context.edit(messageID, content, options)`\r\n- `Context.editOriginal(messageID, content, options)`\r\n- `Context.expired` and internal handlers using this\r\n- `Context.sendFollowUp(content, options)`\r\n- `Message` and `User` class\r\n- `GatewayServer` - Support for gateway events\r\n- `SlashCreatorAPI.interactionCallback(id, token, body)`\r\n- `Server.isWebserver`\r\n- `Server.handleInteraction()`\r\n### Fixed:\r\n- Default error messages\r\n- Exports for Constants and CommandOptionType\r\n## [0.2.0] - 2020-12-16\r\n### Removed:\r\n- **[BREAKING]** `Context.acknowledge` now returns a promise\r\n- **[BREAKING]** Removed `returnPromise` from syncCommands\r\n### Added:\r\n- Errors will be thrown if a Server without its installed package is instantiated\r\n### Fixed:\r\n- RespondFunction is now a promise\r\n- `Context.send` erroring\r\n- Added/Updated debug emit lines\r\n- ExpressServer for TypeScript\r\n## [0.1.0] - 2020-12-15\r\n- Initial release.\r\n\r\n[Unreleased]: https://github.com/Snazzah/slash-create/compare/v1.0.0...HEAD\r\n[0.1.0]: https://github.com/Snazzah/slash-create/releases/tag/v0.1.0\r\n[0.2.0]: https://github.com/Snazzah/slash-create/compare/v0.1.0...v0.2.0\r\n[1.0.0]: https://github.com/Snazzah/slash-create/compare/v0.2.0...v1.0.0\r\n","path":"docs/general/changelog.md"}}},"examples":{"name":"Examples","files":{"basic":{"name":"Basic Example","type":"js","content":"const { Creator } = require('slash-create');\r\nconst path = require('path');\r\nconst creator = new Creator({\r\n  applicationID: '12345678901234567',\r\n  publicKey: 'CLIENT_PUBLIC_KEY',\r\n  token: 'BOT_TOKEN_HERE',\r\n});\r\n\r\ncreator\r\n    // Registers all of your commands in the ./commands/ directory\r\n    .registerCommandsIn(path.join(__dirname, 'commands'))\r\n    // This will sync commands to Discord, it must be called after commands are loaded.\r\n    // This also returns itself for more chaining capabilities.\r\n    .syncCommands();\r\n","path":"docs/examples/basic.js"},"webserver":{"name":"Using a Webserver","type":"js","content":"const { ExpressServer } = require('slash-create');\r\n\r\ncreator\r\n    .withServer(new ExpressServer())\r\n    // Depending on what server is used, this may not be needed.\r\n    .startServer();\r\n\r\n/**\r\n * You can also initialize the server with an existing application.\r\n * If you are doing this with express applications, the express application must already have `express.json()` as middleware.\r\n */\r\n\r\ncreator\r\n    // Set `alreadyListening` if the server has already started.\r\n    .withServer(new ExpressServer(app, { alreadyListening: true }));\r\n","path":"docs/examples/webserver.js"},"discord-bot":{"name":"Using a Discord Bot","type":"md","content":"### With [discord.js](https://github.com/discordjs/discord.js)\r\n```js\r\nconst { Creator, GatewayServer } = require('slash-create');\r\nconst Discord = require('discord.js');\r\nconst client = new Discord.Client();\r\nconst path = require('path');\r\nconst creator = new Creator({\r\n  applicationID: '12345678901234567',\r\n  publicKey: 'CLIENT_PUBLIC_KEY',\r\n  token: 'BOT_TOKEN_HERE',\r\n});\r\n\r\ncreator\r\n  .withServer(\r\n    new GatewayServer(\r\n      (handler) => client.on('raw', (event) => {\r\n        if (event.t === 'INTERACTION_CREATE') handler(event.d);\r\n      })\r\n    )\r\n  )\r\n  .registerCommandsIn(path.join(__dirname, 'commands'))\r\n  .syncCommands();\r\n\r\nclient.login('BOT_TOKEN_HERE');\r\n```\r\n### With [eris](https://github.com/abalabahaha/eris)\r\n```js\r\nconst { Creator, GatewayServer } = require('slash-create');\r\nconst Eris = require('eris');\r\nconst client = new Eris('BOT_TOKEN_HERE');\r\nconst path = require('path');\r\nconst creator = new Creator({\r\n  applicationID: '12345678901234567',\r\n  publicKey: 'CLIENT_PUBLIC_KEY',\r\n  token: 'BOT_TOKEN_HERE',\r\n});\r\n\r\ncreator\r\n  .withServer(\r\n    new GatewayServer(\r\n      (handler) => client.on('rawWS', (event) => {\r\n        if (event.t === 'INTERACTION_CREATE') handler(event.d);\r\n      })\r\n    )\r\n  )\r\n  .registerCommandsIn(path.join(__dirname, 'commands'))\r\n  .syncCommands();\r\n\r\nclient.connect();\r\n```\r\n","path":"docs/examples/discord-bot.md"},"command":{"name":"Example Command","type":"js","content":"const { Command, CommandOptionType } = require('slash-create');\r\n\r\nmodule.exports = class HelloCommand extends Command {\r\n  constructor(creator) {\r\n    super(creator, {\r\n      name: 'hello',\r\n      description: 'Says hello to you.',\r\n      options: [{\r\n        type: CommandOptionType.STRING,\r\n        name: 'food',\r\n        description: 'What food do you like?'\r\n      }]\r\n    });\r\n  }\r\n\r\n  async run(ctx) {\r\n    return ctx.options.food ? `You like ${ctx.options.food}? Nice!` : `Hello, ${ctx.member.displayName}!`;\r\n  }\r\n}\r\n","path":"docs/examples/command.js"}}}},"classes":[{"name":"SlashCreatorAPI","construct":{"name":"constructor","params":[{"name":"creator","type":[[["SlashCreator"]]]}],"returns":[[["SlashCreatorAPI"]]],"meta":{"line":5,"file":"api.ts","path":"src"}},"props":[{"name":"_creator","access":"private","type":[[["SlashCreator"]]],"meta":{"line":5,"file":"api.ts","path":"src"}}],"methods":[{"name":"createCommand","description":"Creates a command","params":[{"name":"command","description":"The command to create.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the command is global.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":29,"file":"api.ts","path":"src"}},{"name":"deleteCommand","description":"Deletes a command.","params":[{"name":"commandID","description":"The command ID to delete.","type":[[["string"]]]},{"name":"guildID","description":"The guild ID to delete the command. If undefined, the global command is deleted.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":62,"file":"api.ts","path":"src"}},{"name":"getCommands","description":"Gets the commands from an applicaton","params":[{"name":"guildID","description":"The guild ID to get commands from. If undefined, global commands are fetched.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["ApplicationCommand",">>"]]],"meta":{"line":15,"file":"api.ts","path":"src"}},{"name":"interactionCallback","description":"Responds to an interaction.","params":[{"name":"interactionID","description":"The interaction's ID.","type":[[["string"]]]},{"name":"interactionToken","description":"The interaction's token.","type":[[["string"]]]},{"name":"body","description":"The body to send.","type":[[["any"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":77,"file":"api.ts","path":"src"}},{"name":"updateCommand","description":"Updates a command.","params":[{"name":"commandID","description":"The command ID to update.","type":[[["string"]]]},{"name":"command","description":"The payload to update the command to.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the global command is updated.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":46,"file":"api.ts","path":"src"}}],"meta":{"line":4,"file":"api.ts","path":"src"}},{"name":"SlashCommand","construct":{"name":"constructor","params":[{"name":"creator","type":[[["SlashCreator"]]]},{"name":"opts","type":[[["SlashCommandOptions"]]]}],"returns":[[["SlashCommand"]]],"meta":{"line":45,"file":"command.ts","path":"src"}},"props":[{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID","access":"private","default":"new Map<string, ThrottleObject>()","type":[[["Map","<"],["string",", "],["ThrottleObject",">"]]],"meta":{"line":45,"file":"command.ts","path":"src"}},{"name":"commandName","type":[[["string"]]],"meta":{"line":35,"file":"command.ts","path":"src"}},{"name":"creator","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":42,"file":"command.ts","path":"src"}},{"name":"description","type":[[["string"]]],"meta":{"line":36,"file":"command.ts","path":"src"}},{"name":"guildID","type":[[["undefined"," | "],["string"]]],"meta":{"line":38,"file":"command.ts","path":"src"}},{"name":"options","type":[[["Array","<"],["ApplicationCommandOption",">"]]],"meta":{"line":37,"file":"command.ts","path":"src"}},{"name":"requiredPermissions","type":[[["Array","<"],["string",">"]]],"meta":{"line":39,"file":"command.ts","path":"src"}},{"name":"throttling","type":[[["ThrottlingOptions"]]],"meta":{"line":40,"file":"command.ts","path":"src"}},{"name":"commandJSON","readonly":true,"type":[[["PartialApplicationCommand"]]],"meta":{"line":61,"file":"command.ts","path":"src"}},{"name":"keyName","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"command.ts","path":"src"}}],"methods":[{"name":"finalize","description":"Finalizes the return output","access":"private","params":[{"name":"response","description":"The response from the command","type":[[["any"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["undefined"," | "],["Promise","<"],["false"," | "],["true"," | "],["Message",">"]]],"meta":{"line":171,"file":"command.ts","path":"src"}},{"name":"hasPermission","description":"Checks whether the context member has permission to use the command","params":[{"name":"ctx","description":"The triggering context","type":[[["CommandContext"]]]}],"returns":[[["boolean"," | "],["string"]]],"returnsDescription":"Whether the member has permission, or an error message to respond with if they don't\n","meta":{"line":79,"file":"command.ts","path":"src"}},{"name":"onBlock","description":"Called when the command is prevented from running, The only reason is `permission` for now.","params":[{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `permission`, `throttling`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds","optional":true,"type":[[["any"]]]}],"returns":[[["null"," | "],["Promise","<"],["false"," | "],["true"," | "],["Message",">"]]],"meta":{"line":107,"file":"command.ts","path":"src"}},{"name":"onError","description":"Called when the command produces an error while running","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]}],"returns":[[["undefined"," | "],["Promise","<"],["false"," | "],["true"," | "],["Message",">"]]],"meta":{"line":129,"file":"command.ts","path":"src"}},{"name":"run","description":"Runs the command","params":[{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":161,"file":"command.ts","path":"src"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":[[["ThrottleObject"," | "],["null"]]],"meta":{"line":139,"file":"command.ts","path":"src"}},{"name":"validateOptions","scope":"static","params":[{"name":"opts","type":[[["SlashCommandOptions"]]]}],"returns":[[["void"]]],"meta":{"line":179,"file":"command.ts","path":"src"}}],"meta":{"line":34,"file":"command.ts","path":"src"}},{"name":"CommandContext","construct":{"name":"constructor","params":[{"name":"creator","type":[[["SlashCreator"]]]},{"name":"data","type":[[["InteractionRequestData"]]]},{"name":"respond","type":[[["RespondFunction"]]]},{"name":"webserverMode","type":[[["boolean"]]]}],"returns":[[["CommandContext"]]],"meta":{"line":69,"file":"context.ts","path":"src"}},"props":[{"name":"_respond","access":"private","type":[[["RespondFunction"]]],"meta":{"line":68,"file":"context.ts","path":"src"}},{"name":"channelID","description":"The channel ID that the command was invoked in","readonly":true,"type":[[["string"]]],"meta":{"line":52,"file":"context.ts","path":"src"}},{"name":"commandID","description":"The command's ID","readonly":true,"type":[[["string"]]],"meta":{"line":60,"file":"context.ts","path":"src"}},{"name":"commandName","description":"The command's name","readonly":true,"type":[[["string"]]],"meta":{"line":58,"file":"context.ts","path":"src"}},{"name":"creator","description":"The creator of the command","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":44,"file":"context.ts","path":"src"}},{"name":"data","description":"The full interaction data","readonly":true,"type":[[["InteractionRequestData"]]],"meta":{"line":46,"file":"context.ts","path":"src"}},{"name":"guildID","description":"The guild ID that the command was invoked in","readonly":true,"type":[[["string"]]],"meta":{"line":54,"file":"context.ts","path":"src"}},{"name":"initiallyResponded","description":"Whether the initial response was made","default":"false","type":[[["boolean"]]],"meta":{"line":66,"file":"context.ts","path":"src"}},{"name":"interactionID","description":"The interaction's ID","readonly":true,"type":[[["string"]]],"meta":{"line":50,"file":"context.ts","path":"src"}},{"name":"interactionToken","description":"The interaction's token","readonly":true,"type":[[["string"]]],"meta":{"line":48,"file":"context.ts","path":"src"}},{"name":"invokedAt","description":"The time when the context was created","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":64,"file":"context.ts","path":"src"}},{"name":"member","description":"The member that invoked the command","readonly":true,"type":[[["Member"]]],"meta":{"line":56,"file":"context.ts","path":"src"}},{"name":"options","description":"The options given to the command","readonly":true,"type":[[["undefined"," | {}"]]],"meta":{"line":62,"file":"context.ts","path":"src"}},{"name":"webserverMode","access":"private","type":[[["boolean"]]],"meta":{"line":69,"file":"context.ts","path":"src"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":89,"file":"context.ts","path":"src"}}],"methods":[{"name":"acknowledge","description":"Acknowleges the interaction. Including source will send a message showing only the source.","params":[{"name":"includeSource","description":"Whether to include the source in the acknowledgement.","default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the acknowledgement passed\n","meta":{"line":245,"file":"context.ts","path":"src"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":231,"file":"context.ts","path":"src"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":182,"file":"context.ts","path":"src"}},{"name":"editOriginal","description":"Edits the original message.\nThis is put on a timeout of 150 ms for webservers to account for\nDiscord recieving and processing the original response.\nNote: This will error with ephemeral messages or acknowledgements.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":220,"file":"context.ts","path":"src"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` and `includeSource` are ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":102,"file":"context.ts","path":"src"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["FollowUpMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["FollowUpMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":146,"file":"context.ts","path":"src"}},{"name":"convertOptions","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["CommandOption",">"]]]}],"returns":[[["{}"]]],"meta":{"line":261,"file":"context.ts","path":"src"}}],"meta":{"line":42,"file":"context.ts","path":"src"}},{"name":"SlashCreator","extends":["TypedEventEmitter"],"construct":{"name":"constructor","params":[{"name":"opts","type":[[["SlashCreatorOptions"]]]}],"returns":[[["SlashCreator"]]],"meta":{"line":99,"file":"creator.ts","path":"src"}},"props":[{"name":"allowedMentions","description":"The formatted allowed mentions from the options","type":[[["FormattedAllowedMentions"]]],"meta":{"line":99,"file":"creator.ts","path":"src"}},{"name":"api","description":"The API handler for the creator","readonly":true,"type":[[["SlashCreatorAPI"]]],"meta":{"line":88,"file":"creator.ts","path":"src"}},{"name":"commands","description":"The commands loaded onto the creator","readonly":true,"default":"new Collection<string, SlashCommand>()","type":[[["Collection","<"],["string",", "],["SlashCommand",">"]]],"meta":{"line":90,"file":"creator.ts","path":"src"}},{"name":"commandsPath","description":"The path where the commands were loaded from","see":["#registerCommandsIn\n"],"type":[[["undefined"," | "],["string"]]],"meta":{"line":95,"file":"creator.ts","path":"src"}},{"name":"options","description":"The options from constructing the creator","type":[[["SlashCreatorOptions"]]],"meta":{"line":84,"file":"creator.ts","path":"src"}},{"name":"requestHandler","description":"The request handler for the creator","readonly":true,"type":[[["RequestHandler"]]],"meta":{"line":86,"file":"creator.ts","path":"src"}},{"name":"server","description":"The server being used in the creator","type":[[["Server"]]],"meta":{"line":97,"file":"creator.ts","path":"src"}}],"methods":[{"name":"_createGatewayRespond","access":"private","params":[{"name":"interactionID","type":[[["string"]]]},{"name":"token","type":[[["string"]]]}],"returns":[[["RespondFunction"]]],"meta":{"line":520,"file":"creator.ts","path":"src"}},{"name":"_getCommand","access":"private","params":[{"name":"commandName","type":[[["string"]]]},{"name":"guildID","type":[[["string"]]]}],"returns":[[["undefined"," | "],["SlashCommand"]]],"meta":{"line":381,"file":"creator.ts","path":"src"}},{"name":"_onInteraction","access":"private","params":[{"name":"interaction","type":[[["AllRequestData"]]]},{"name":"respond","type":[[["RespondFunction"," | "],["null"]]]},{"name":"webserverMode","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["null"," | "],["false"," | "],["true"," | "],["void"," | "],["Message",">"]]],"meta":{"line":417,"file":"creator.ts","path":"src"}},{"name":"_onRequest","access":"private","params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["Promise","<"],["null"," | "],["false"," | "],["true"," | "],["void"," | "],["Message",">"]]],"meta":{"line":385,"file":"creator.ts","path":"src"}},{"name":"addListener","params":[{"name":"event","type":[[["E"]]]},{"name":"listener","type":[[["Events","["],["E","]"]]]}],"returns":[[["this"]]],"meta":{"line":24,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"emit","params":[{"name":"event","type":[[["E"]]]},{"name":"args","type":[[["Arguments","<"],["Events","["],["E","]>"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"eventNames","returns":[[["Array","<"],["keyof"," "],["Events"," | "],["string"," | "],["symbol",">"]]],"meta":{"line":35,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"getMaxListeners","returns":[[["number"]]],"meta":{"line":40,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"listenerCount","params":[{"name":"event","type":[[["E"]]]}],"returns":[[["number"]]],"meta":{"line":38,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"listeners","params":[{"name":"event","type":[[["E"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":37,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"off","params":[{"name":"event","type":[[["E"]]]},{"name":"listener","type":[[["Events","["],["E","]"]]]}],"returns":[[["this"]]],"meta":{"line":30,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"on","params":[{"name":"event","type":[[["E"]]]},{"name":"listener","type":[[["Events","["],["E","]"]]]}],"returns":[[["this"]]],"meta":{"line":25,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"once","params":[{"name":"event","type":[[["E"]]]},{"name":"listener","type":[[["Events","["],["E","]"]]]}],"returns":[[["this"]]],"meta":{"line":26,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"prependListener","params":[{"name":"event","type":[[["E"]]]},{"name":"listener","type":[[["Events","["],["E","]"]]]}],"returns":[[["this"]]],"meta":{"line":27,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"prependOnceListener","params":[{"name":"event","type":[[["E"]]]},{"name":"listener","type":[[["Events","["],["E","]"]]]}],"returns":[[["this"]]],"meta":{"line":28,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"rawListeners","params":[{"name":"event","type":[[["E"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":36,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"registerCommand","description":"Registers a single command","see":["SlashCreator#registerCommands\n"],"examples":[],"emits":[],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":143,"file":"creator.ts","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["any",">"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","default":"false","type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":165,"file":"creator.ts","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","see":[],"examples":["\nconst path = require('path');\ncreator.registerCommandsIn(path.join(__dirname, 'commands'));\n"],"emits":[],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["RequireAllOptions"," | "],["string"]]]}],"returns":[[["this"]]],"meta":{"line":189,"file":"creator.ts","path":"src"}},{"name":"removeAllListeners","params":[{"name":"event","optional":true,"type":[[["E"]]]}],"returns":[[["this"]]],"meta":{"line":31,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"removeListener","params":[{"name":"event","type":[[["E"]]]},{"name":"listener","type":[[["Events","["],["E","]"]]]}],"returns":[[["this"]]],"meta":{"line":32,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"setMaxListeners","params":[{"name":"maxListeners","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":41,"file":"index.d.ts","path":"node_modules/typed-emitter"}},{"name":"startServer","description":"Starts the server, if one was defined.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":223,"file":"creator.ts","path":"src"}},{"name":"syncCommands","description":"Sync all commands with Discord. This ensures that commands exist when handling them.","params":[{"name":"opts","optional":true,"type":[[["SyncCommandOptions"]]]}],"returns":[[["this"]]],"meta":{"line":242,"file":"creator.ts","path":"src"}},{"name":"syncCommandsIn","description":"Sync guild commands.","params":[{"name":"guildID","description":"The guild to sync","type":[[["string"]]]},{"name":"deleteCommands","description":"Whether to delete command not found in the creator","default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":292,"file":"creator.ts","path":"src"}},{"name":"syncGlobalCommands","description":"Sync global commands.","params":[{"name":"deleteCommands","description":"Whether to delete command not found in the creator","default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":344,"file":"creator.ts","path":"src"}},{"name":"withServer","description":"Attaches a server to the creator.","params":[{"name":"server","description":"The server to use","type":[[["Server"]]]}],"returns":[[["this"]]],"meta":{"line":207,"file":"creator.ts","path":"src"}}],"events":[{"name":"commandBlock","description":"Emitted when a command is blocked.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was blocked","type":[[["SlashCommand"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":301,"file":"constants.ts","path":"src"}},{"name":"commandError","description":"Emitted when a command gave an error.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that gave an error","type":[[["SlashCommand"]]]},{"name":"err","description":"The error given","type":[[["Error"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":310,"file":"constants.ts","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was registered","type":[[["SlashCommand"]]]},{"name":"creator","description":"Creator that the command was registered to","type":[[["SlashCreator"]]]}],"returns":[[["void"]]],"meta":{"line":291,"file":"constants.ts","path":"src"}},{"name":"commandRun","description":"Emitted when a command is ran.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was ran","type":[[["SlashCommand"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise","<"],["any",">"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":319,"file":"constants.ts","path":"src"}},{"name":"debug","description":"Emitted when a debug message is given.","see":[],"examples":[],"emits":[],"params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":262,"file":"constants.ts","path":"src"}},{"name":"error","description":"Emitted when an error occurred","see":[],"examples":[],"emits":[],"params":[{"name":"err","description":"The error thrown","type":[[["Error"]]]}],"returns":[[["void"]]],"meta":{"line":269,"file":"constants.ts","path":"src"}},{"name":"ping","description":"Emitted when Discord pings the interaction endpoint.","see":[],"examples":[],"emits":[],"returns":[[["void"]]],"meta":{"line":235,"file":"constants.ts","path":"src"}},{"name":"rawREST","description":"Emitted when the Client's RequestHandler receives a response.","see":[],"examples":[],"emits":[],"params":[{"name":"request","description":"The data for the request","type":[[["RawRequest"]]]}],"returns":[[["void"]]],"meta":{"line":248,"file":"constants.ts","path":"src"}},{"name":"synced","description":"Emitted when the creator successfully synced commands.","see":[],"examples":[],"emits":[],"returns":[[["void"]]],"meta":{"line":241,"file":"constants.ts","path":"src"}},{"name":"unknownInteraction","description":"Emitted when an unknown interaction type is encountered.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The unhandled interaction","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":283,"file":"constants.ts","path":"src"}},{"name":"unverifiedRequest","description":"Emitted when a request failed to be verified.","see":[],"examples":[],"emits":[],"params":[{"name":"treq","description":"The unverified request","type":[[["TransformedRequest"]]]}],"returns":[[["void"]]],"meta":{"line":276,"file":"constants.ts","path":"src"}},{"name":"warn","description":"Emitted when a warning is given.","see":[],"examples":[],"emits":[],"params":[{"name":"warning","description":"The warning","type":[[["Error"," | "],["string"]]]}],"returns":[[["void"]]],"meta":{"line":255,"file":"constants.ts","path":"src"}}],"meta":{"line":82,"file":"creator.ts","path":"src"}},{"name":"DiscordHTTPError","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","type":[[["ClientRequest"]]]},{"name":"res","type":[[["IncomingMessage"]]]},{"name":"response","type":[[["any"]]]},{"name":"stack","type":[[["string"]]]}],"returns":[[["DiscordHTTPError"]]],"meta":{"line":9,"file":"DiscordHTTPError.ts","path":"src/errors"}},"props":[{"name":"code","readonly":true,"type":[[["number"]]],"meta":{"line":7,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"message","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"req","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":4,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"res","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":5,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"response","readonly":true,"type":[[["any"]]],"meta":{"line":6,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"stack","readonly":true,"type":[[["string"]]],"meta":{"line":9,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":32,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":36,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"meta":{"line":3,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"DiscordRESTError","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","type":[[["ClientRequest"]]]},{"name":"res","type":[[["IncomingMessage"]]]},{"name":"response","type":[[["any"]]]},{"name":"stack","type":[[["string"]]]}],"returns":[[["DiscordRESTError"]]],"meta":{"line":9,"file":"DiscordRESTError.ts","path":"src/errors"}},"props":[{"name":"code","readonly":true,"type":[[["number"]]],"meta":{"line":7,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"message","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"req","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":4,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"res","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":5,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"response","readonly":true,"type":[[["any"]]],"meta":{"line":6,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"stack","readonly":true,"type":[[["string"]]],"meta":{"line":9,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"DiscordRESTError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":39,"file":"DiscordRESTError.ts","path":"src/errors"}}],"meta":{"line":3,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Server","construct":{"name":"constructor","params":[{"name":"opts","default":"{ alreadyListening: false }","type":[[["ServerOptions"]]]},{"name":"isWebserver","default":"true","type":[[["boolean"]]]}],"returns":[[["Server"]]],"meta":{"line":31,"file":"server.ts","path":"src"}},"props":[{"name":"alreadyListening","type":[[["boolean"]]],"meta":{"line":30,"file":"server.ts","path":"src"}},{"name":"isWebserver","type":[[["boolean"]]],"meta":{"line":31,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":40,"file":"server.ts","path":"src"}},{"name":"createEndpoint","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":44,"file":"server.ts","path":"src"}},{"name":"handleInteraction","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":48,"file":"server.ts","path":"src"}},{"name":"listen","params":[{"name":"port","default":"80","type":[[["number"]]]},{"name":"host","default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":52,"file":"server.ts","path":"src"}}],"meta":{"line":29,"file":"server.ts","path":"src"}},{"name":"ExpressServer","extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The express application. Must have express.json installed as a middleware.","optional":true,"type":[[["Express","."],["Application"]]]},{"name":"opts","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["ExpressServer"]]],"meta":{"line":10,"file":"express.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","type":[[["boolean"]]],"meta":{"line":30,"file":"server.ts","path":"src"}},{"name":"app","access":"private","type":[[["Express","."],["Application"]]],"meta":{"line":10,"file":"express.ts","path":"src/servers"}},{"name":"isWebserver","type":[[["boolean"]]],"meta":{"line":31,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Express server.","params":[{"name":"middleware","description":"The middleware to add.","type":[[["Express","."],["RequestHandler"]]]}],"returns":[[["this"]]],"meta":{"line":27,"file":"express.ts","path":"src/servers"}},{"name":"createEndpoint","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":48,"file":"express.ts","path":"src/servers"}},{"name":"handleInteraction","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":48,"file":"server.ts","path":"src"}},{"name":"listen","params":[{"name":"port","default":"80","type":[[["number"]]]},{"name":"host","default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":66,"file":"express.ts","path":"src/servers"}},{"name":"set","description":"Sets an Express setting.","see":["http://expressjs.com/en/4x/api.html#app.settings.table\n"],"examples":[],"emits":[],"params":[{"name":"setting","description":"Express setting string","type":[[["string"]]]},{"name":"value","description":"The value to set the setting to","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":43,"file":"express.ts","path":"src/servers"}},{"name":"use","see":["ExpressServer#addMiddleware"],"examples":[],"emits":[],"params":[{"name":"middleware","type":[[["Express","."],["RequestHandler"]]]}],"returns":[[["this"]]],"meta":{"line":33,"file":"express.ts","path":"src/servers"}}],"meta":{"line":9,"file":"express.ts","path":"src/servers"}},{"name":"FastifyServer","extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The fastify application, or the options for initialization","optional":true,"type":[[["FastifyInstance"," | "],["FastifyOpts"]]]},{"name":"opts","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["FastifyServer"]]],"meta":{"line":16,"file":"fastify.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","type":[[["boolean"]]],"meta":{"line":30,"file":"server.ts","path":"src"}},{"name":"app","access":"private","type":[[["FastifyInstance"]]],"meta":{"line":16,"file":"fastify.ts","path":"src/servers"}},{"name":"isWebserver","type":[[["boolean"]]],"meta":{"line":31,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Fastify server. This requires you to have 'middie' registered\nto the server before using.","params":[{"name":"middleware","description":"The middleware to add.","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":35,"file":"fastify.ts","path":"src/servers"}},{"name":"createEndpoint","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":50,"file":"fastify.ts","path":"src/servers"}},{"name":"handleInteraction","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":48,"file":"server.ts","path":"src"}},{"name":"listen","params":[{"name":"port","default":"80","type":[[["number"]]]},{"name":"host","default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":68,"file":"fastify.ts","path":"src/servers"}},{"name":"use","see":["FastifyServer#addMiddleware"],"examples":[],"emits":[],"params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":46,"file":"fastify.ts","path":"src/servers"}}],"meta":{"line":15,"file":"fastify.ts","path":"src/servers"}},{"name":"GatewayServer","extends":["Server"],"construct":{"name":"constructor","params":[{"name":"eventHandler","description":"A function that is used to handle the event for gateway interactinos.","type":[[["EventHandler"]]]}],"returns":[[["GatewayServer"]]],"meta":{"line":6,"file":"gateway.ts","path":"src/servers"}},"props":[{"name":"_eventHandler","access":"private","type":[[["EventHandler"]]],"meta":{"line":6,"file":"gateway.ts","path":"src/servers"}},{"name":"alreadyListening","type":[[["boolean"]]],"meta":{"line":30,"file":"server.ts","path":"src"}},{"name":"isWebserver","type":[[["boolean"]]],"meta":{"line":31,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":40,"file":"server.ts","path":"src"}},{"name":"createEndpoint","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":44,"file":"server.ts","path":"src"}},{"name":"handleInteraction","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":16,"file":"gateway.ts","path":"src/servers"}},{"name":"listen","params":[{"name":"port","default":"80","type":[[["number"]]]},{"name":"host","default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":52,"file":"server.ts","path":"src"}}],"meta":{"line":5,"file":"gateway.ts","path":"src/servers"}},{"name":"Member","construct":{"name":"constructor","params":[{"name":"data","type":[[["CommandMember"]]]},{"name":"creator","type":[[["SlashCreator"]]]}],"returns":[[["Member"]]],"meta":{"line":27,"file":"member.ts","path":"src/structures"}},"props":[{"name":"_creator","access":"private","type":[[["SlashCreator"]]],"meta":{"line":24,"file":"member.ts","path":"src/structures"}},{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":27,"file":"member.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":26,"file":"member.ts","path":"src/structures"}},{"name":"deaf","description":"Whether the user is deafened in voice channels","type":[[["boolean"]]],"meta":{"line":20,"file":"member.ts","path":"src/structures"}},{"name":"id","description":"The member's ID","type":[[["string"]]],"meta":{"line":8,"file":"member.ts","path":"src/structures"}},{"name":"joinedAt","description":"The timestamp the member joined the guild","type":[[["number"]]],"meta":{"line":12,"file":"member.ts","path":"src/structures"}},{"name":"mute","description":"Whether the user is muted in voice channels","type":[[["boolean"]]],"meta":{"line":18,"file":"member.ts","path":"src/structures"}},{"name":"nick","description":"The member's nickname","type":[[["undefined"," | "],["string"]]],"meta":{"line":10,"file":"member.ts","path":"src/structures"}},{"name":"premiumSince","description":"The time of when this member boosted the server.","type":[[["undefined"," | "],["number"]]],"meta":{"line":16,"file":"member.ts","path":"src/structures"}},{"name":"roles","description":"An array of role IDs that the user has.","type":[[["Array","<"],["string",">"]]],"meta":{"line":14,"file":"member.ts","path":"src/structures"}},{"name":"user","description":"The user object for this member","type":[[["User"]]],"meta":{"line":22,"file":"member.ts","path":"src/structures"}},{"name":"displayName","readonly":true,"type":[[["string"]]],"meta":{"line":58,"file":"member.ts","path":"src/structures"}},{"name":"mention","readonly":true,"type":[[["string"]]],"meta":{"line":50,"file":"member.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":45,"file":"member.ts","path":"src/structures"}}],"methods":[{"name":"toString","returns":[[["string"]]],"meta":{"line":54,"file":"member.ts","path":"src/structures"}}],"meta":{"line":6,"file":"member.ts","path":"src/structures"}},{"name":"Message","construct":{"name":"constructor","params":[{"name":"data","type":[[["MessageData"]]]},{"name":"ctx","type":[[["CommandContext"]]]}],"returns":[[["Message"]]],"meta":{"line":56,"file":"message.ts","path":"src/structures"}},"props":[{"name":"_ctx","access":"private","type":[[["CommandContext"]]],"meta":{"line":56,"file":"message.ts","path":"src/structures"}},{"name":"attachments","description":"The message's attachments.","type":[[["Array","<"],["any",">"]]],"meta":{"line":36,"file":"message.ts","path":"src/structures"}},{"name":"author","description":"The author of the message.","type":[[["User"]]],"meta":{"line":34,"file":"message.ts","path":"src/structures"}},{"name":"channelID","description":"The ID of the channel the message is in.","type":[[["string"]]],"meta":{"line":32,"file":"message.ts","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":30,"file":"message.ts","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp of when the message was last edited","type":[[["undefined"," | "],["number"]]],"meta":{"line":50,"file":"message.ts","path":"src/structures"}},{"name":"embeds","description":"The message's embeds.","type":[[["Array","<"],["any",">"]]],"meta":{"line":38,"file":"message.ts","path":"src/structures"}},{"name":"flags","description":"The message's flags","type":[[["number"]]],"meta":{"line":52,"file":"message.ts","path":"src/structures"}},{"name":"id","description":"The message's ID","type":[[["string"]]],"meta":{"line":26,"file":"message.ts","path":"src/structures"}},{"name":"mentionedEveryone","description":"Whether the message mentioned everyone/here","type":[[["boolean"]]],"meta":{"line":44,"file":"message.ts","path":"src/structures"}},{"name":"mentions","description":"The message's user mentions","type":[[["Array","<"],["string",">"]]],"meta":{"line":40,"file":"message.ts","path":"src/structures"}},{"name":"roleMentions","description":"The message's role mentions","type":[[["Array","<"],["string",">"]]],"meta":{"line":42,"file":"message.ts","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of the message","type":[[["number"]]],"meta":{"line":48,"file":"message.ts","path":"src/structures"}},{"name":"tts","description":"Whether the message used TTS","type":[[["boolean"]]],"meta":{"line":46,"file":"message.ts","path":"src/structures"}},{"name":"type","description":"The message type","type":[[["number"]]],"meta":{"line":28,"file":"message.ts","path":"src/structures"}},{"name":"webhookID","description":"The message's webhook ID","type":[[["string"]]],"meta":{"line":54,"file":"message.ts","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this message.","returns":[[["Promise","<"],["any",">"]]],"meta":{"line":90,"file":"message.ts","path":"src/structures"}},{"name":"edit","description":"Edits this message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":83,"file":"message.ts","path":"src/structures"}}],"meta":{"line":24,"file":"message.ts","path":"src/structures"}},{"name":"Permissions","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from","default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["Permissions"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":6,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":38,"file":"permissions.ts","path":"src/structures"}}],"methods":[{"name":"[Symbol.iterator]","returns":[[["Generator","<"],["string",", "],["void",", "],["undefined",">"]]],"meta":{"line":88,"file":"bitfield.ts","path":"src/util"}},{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":21,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":30,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":39,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":50,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":60,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":71,"file":"bitfield.ts","path":"src/util"}},{"name":"toJSON","returns":[[["number"]]],"meta":{"line":80,"file":"bitfield.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":76,"file":"bitfield.ts","path":"src/util"}},{"name":"valueOf","returns":[[["number"]]],"meta":{"line":84,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"bit(s) to resolve","default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":96,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":37,"file":"permissions.ts","path":"src/structures"}},{"name":"User","construct":{"name":"constructor","params":[{"name":"data","type":[[["UserObject"]]]},{"name":"creator","type":[[["SlashCreator"]]]}],"returns":[[["User"]]],"meta":{"line":21,"file":"user.ts","path":"src/structures"}},"props":[{"name":"_creator","access":"private","type":[[["SlashCreator"]]],"meta":{"line":18,"file":"user.ts","path":"src/structures"}},{"name":"_flags","access":"private","type":[[["number"]]],"meta":{"line":21,"file":"user.ts","path":"src/structures"}},{"name":"_flagsBitfield","access":"private","type":[[["UserFlags"]]],"meta":{"line":20,"file":"user.ts","path":"src/structures"}},{"name":"avatar","description":"The user's avatar hash","type":[[["undefined"," | "],["string"]]],"meta":{"line":14,"file":"user.ts","path":"src/structures"}},{"name":"bot","description":"Whether the user is a bot","type":[[["boolean"]]],"meta":{"line":16,"file":"user.ts","path":"src/structures"}},{"name":"discriminator","description":"The user's discriminator","type":[[["string"]]],"meta":{"line":12,"file":"user.ts","path":"src/structures"}},{"name":"id","description":"The user's ID","type":[[["string"]]],"meta":{"line":8,"file":"user.ts","path":"src/structures"}},{"name":"username","description":"The user's username","type":[[["string"]]],"meta":{"line":10,"file":"user.ts","path":"src/structures"}},{"name":"avatarURL","readonly":true,"type":[[["string"]]],"meta":{"line":56,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatar","readonly":true,"type":[[["number"]]],"meta":{"line":48,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatarURL","readonly":true,"type":[[["string"]]],"meta":{"line":52,"file":"user.ts","path":"src/structures"}},{"name":"flags","description":"The public flags for the user.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":35,"file":"user.ts","path":"src/structures"}},{"name":"mention","readonly":true,"type":[[["string"]]],"meta":{"line":40,"file":"user.ts","path":"src/structures"}}],"methods":[{"name":"dynamicAvatarURL","params":[{"name":"format","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["string"]]],"meta":{"line":60,"file":"user.ts","path":"src/structures"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":44,"file":"user.ts","path":"src/structures"}}],"meta":{"line":6,"file":"user.ts","path":"src/structures"}},{"name":"Permissions","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from","default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["Permissions"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":6,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":25,"file":"userFlags.ts","path":"src/structures"}}],"methods":[{"name":"[Symbol.iterator]","returns":[[["Generator","<"],["string",", "],["void",", "],["undefined",">"]]],"meta":{"line":88,"file":"bitfield.ts","path":"src/util"}},{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":21,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":30,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":39,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":50,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":60,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":71,"file":"bitfield.ts","path":"src/util"}},{"name":"toJSON","returns":[[["number"]]],"meta":{"line":80,"file":"bitfield.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":76,"file":"bitfield.ts","path":"src/util"}},{"name":"valueOf","returns":[[["number"]]],"meta":{"line":84,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"bit(s) to resolve","default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":96,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":24,"file":"userFlags.ts","path":"src/structures"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from","default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["BitField"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":6,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","scope":"static","type":[[["{}"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"[Symbol.iterator]","returns":[[["Generator","<"],["string",", "],["void",", "],["undefined",">"]]],"meta":{"line":88,"file":"bitfield.ts","path":"src/util"}},{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":21,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":30,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":39,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":50,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":60,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":71,"file":"bitfield.ts","path":"src/util"}},{"name":"toJSON","returns":[[["number"]]],"meta":{"line":80,"file":"bitfield.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":76,"file":"bitfield.ts","path":"src/util"}},{"name":"valueOf","returns":[[["number"]]],"meta":{"line":84,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"bit(s) to resolve","default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":96,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":4,"file":"bitfield.ts","path":"src/util"}},{"name":"RequestHandler","construct":{"name":"constructor","params":[{"name":"creator","type":[[["SlashCreator"]]]}],"returns":[[["RequestHandler"]]],"meta":{"line":28,"file":"requestHandler.ts","path":"src/util"}},"props":[{"name":"_creator","access":"private","type":[[["SlashCreator"]]],"meta":{"line":28,"file":"requestHandler.ts","path":"src/util"}},{"name":"agent","type":[[["HTTPS","."],["Agent"]]],"meta":{"line":23,"file":"requestHandler.ts","path":"src/util"}},{"name":"baseURL","type":[[["string"]]],"meta":{"line":19,"file":"requestHandler.ts","path":"src/util"}},{"name":"globalBlock","type":[[["boolean"]]],"meta":{"line":25,"file":"requestHandler.ts","path":"src/util"}},{"name":"latencyRef","type":[[["LatencyRef"]]],"meta":{"line":24,"file":"requestHandler.ts","path":"src/util"}},{"name":"ratelimits","type":[[["{}"]]],"meta":{"line":21,"file":"requestHandler.ts","path":"src/util"}},{"name":"readyQueue","type":[[["Array","<"],["any",">"]]],"meta":{"line":26,"file":"requestHandler.ts","path":"src/util"}},{"name":"requestTimeout","type":[[["number"]]],"meta":{"line":22,"file":"requestHandler.ts","path":"src/util"}},{"name":"userAgent","type":[[["string"]]],"meta":{"line":20,"file":"requestHandler.ts","path":"src/util"}}],"methods":[{"name":"globalUnblock","returns":[[["void"]]],"meta":{"line":49,"file":"requestHandler.ts","path":"src/util"}},{"name":"request","description":"Make an API request","params":[{"name":"method","description":"Uppercase HTTP method","type":[[["string"]]]},{"name":"url","description":"URL of the endpoint","type":[[["string"]]]},{"name":"auth","description":"Whether to add the Authorization header and token or not","default":"true","type":[[["boolean"]]]},{"name":"body","description":"Request payload","optional":true,"type":[[["any"]]]},{"name":"_route","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"short","default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["any",">"]]],"returnsDescription":"{Resolves with the returned JSON data\n","meta":{"line":64,"file":"requestHandler.ts","path":"src/util"}},{"name":"routefy","params":[{"name":"url","type":[[["string"]]]},{"name":"method","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":370,"file":"requestHandler.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":384,"file":"requestHandler.ts","path":"src/util"}}],"meta":{"line":18,"file":"requestHandler.ts","path":"src/util"}},{"name":"SequentialBucket","description":"Ratelimit requests and release in sequence","construct":{"name":"constructor","description":"Construct a SequentialBucket","see":[],"examples":[],"emits":[],"params":[{"name":"limit","type":[[["number"]]]},{"name":"latencyRef","default":"{ latency: 0 }","type":[[["LatencyRef"]]]}],"returns":[[["SequentialBucket"]]],"meta":{"line":20,"file":"sequentialBucket.ts","path":"src/util"}},"props":[{"name":"_queue","access":"private","type":[[["Array","<"],["any",">"]]],"meta":{"line":18,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"last","access":"private","type":[[["undefined"," | "],["number"]]],"meta":{"line":20,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"latencyRef","access":"private","type":[[["LatencyRef"]]],"meta":{"line":17,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"limit","description":"How many tokens the bucket can consume in the current interval","type":[[["number"]]],"meta":{"line":9,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processing","description":"Whether the queue is being processed","type":[[["boolean"]]],"meta":{"line":11,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processingTimeout","access":"private","type":[[["any"]]],"meta":{"line":19,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"remaining","description":"How many tokens the bucket has left in the current interval","type":[[["number"]]],"meta":{"line":13,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"reset","description":"Timestamp of next reset","type":[[["number"]]],"meta":{"line":15,"file":"sequentialBucket.ts","path":"src/util"}}],"methods":[{"name":"check","params":[{"name":"override","default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":36,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"queue","description":"Queue something in the SequentialBucket","params":[{"name":"func","description":"A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work","type":[[["Function"]]]},{"name":"short","default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":85,"file":"sequentialBucket.ts","path":"src/util"}}],"meta":{"line":7,"file":"sequentialBucket.ts","path":"src/util"}}],"typedefs":[{"name":"SlashCommandOptions","meta":{"line":6,"file":"command.ts","path":"src"},"props":[{"name":"description","description":"The description of the command.","type":[[["string"]]]},{"name":"guildID","description":"The guild ID that this command will be assigned to.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"options","description":"The command options","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"requiredPermissions","description":"The required permission(s) for this command.","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"throttling","description":"The throttling options for the command","optional":true,"type":[[["ThrottlingOptions"]]]}]},{"name":"ThrottleObject","meta":{"line":28,"file":"command.ts","path":"src"},"props":[{"name":"start","type":[[["number"]]]},{"name":"timeout","type":[[["any"]]]},{"name":"usages","type":[[["number"]]]}]},{"name":"ThrottlingOptions","meta":{"line":21,"file":"command.ts","path":"src"},"props":[{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]},{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]}]},{"name":"ApplicationCommand","meta":{"line":62,"file":"constants.ts","path":"src"},"props":[{"name":"application_id","type":[[["string"]]]},{"name":"description","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]}]},{"name":"ApplicationCommandOption","meta":{"line":67,"file":"constants.ts","path":"src"},"props":[{"name":"choices","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionChoice",">"]]]},{"name":"default","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"required","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"type","type":[[["CommandOptionType"]]]}]},{"name":"ApplicationCommandOptionChoice","meta":{"line":77,"file":"constants.ts","path":"src"},"props":[{"name":"name","type":[[["string"]]]},{"name":"value","type":[[["string"," | "],["number"]]]}]},{"name":"CommandData","meta":{"line":142,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["CommandOption",">"]]]}]},{"name":"CommandMember","meta":{"line":117,"file":"constants.ts","path":"src"},"props":[{"name":"deaf","type":[[["boolean"]]]},{"name":"is_pending","type":[[["boolean"]]]},{"name":"joined_at","type":[[["string"]]]},{"name":"mute","type":[[["boolean"]]]},{"name":"nick","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"pending","type":[[["boolean"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"premium_since","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"roles","type":[[["Array","<"],["string",">"]]]},{"name":"user","type":[[["CommandUser"]]]}]},{"name":"CommandOption","meta":{"line":148,"file":"constants.ts","path":"src"},"props":[{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["CommandOption",">"]]]},{"name":"value","optional":true,"type":[[["string"," | "],["number"," | "],["boolean"]]]}]},{"name":"CommandUser","meta":{"line":130,"file":"constants.ts","path":"src"},"props":[{"name":"avatar","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"discriminator","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"public_flags","type":[[["number"]]]},{"name":"username","type":[[["string"]]]}]},{"name":"InteractionRequestData","meta":{"line":106,"file":"constants.ts","path":"src"},"props":[{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["CommandData"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["COMMAND"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"PartialApplicationCommand","meta":{"line":56,"file":"constants.ts","path":"src"},"props":[{"name":"description","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]}]},{"name":"PingRequestData","meta":{"line":99,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["PING"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"RawRequest","meta":{"line":82,"file":"constants.ts","path":"src"},"props":[{"name":"auth","type":[[["boolean"]]]},{"name":"body","type":[[["any"]]]},{"name":"method","type":[[["string"]]]},{"name":"resp","type":[[["IncomingMessage"]]]},{"name":"route","type":[[["string"]]]},{"name":"short","type":[[["boolean"]]]},{"name":"url","type":[[["string"]]]}]},{"name":"RequestData","meta":{"line":94,"file":"constants.ts","path":"src"},"props":[{"name":"type","type":[[["InteractionType"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"RequireAllOptions","meta":{"line":154,"file":"constants.ts","path":"src"},"props":[{"name":"dirname","type":[[["string"]]]},{"name":"excludeDirs","optional":true,"type":[[["RegExp"]]]},{"name":"filter","optional":true,"type":[[["("],["name",": "],["string",", "],["path",": "],["string",") => "],["string"," | "],["false"," | "],["undefined"," | "],["RegExp"]]]},{"name":"map","optional":true,"type":[[["undefined"," | ("],["name",": "],["string",", "],["path",": "],["string",") => "],["string"]]]},{"name":"recursive","optional":true,"type":[[["true"," | "],["false"]]]},{"name":"resolve","optional":true,"type":[[["undefined"," | ("],["module",": "],["any",") => "],["any"]]]}]},{"name":"UserObject","meta":{"line":138,"file":"constants.ts","path":"src"},"props":[{"name":"avatar","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"bot","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"discriminator","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"public_flags","type":[[["number"]]]},{"name":"username","type":[[["string"]]]}]},{"name":"AllRequestData","type":[[["PingRequestData"," | "],["InteractionRequestData"]]],"meta":{"line":92,"file":"constants.ts","path":"src"}},{"name":"ImageFormat","type":[[["'jpg'"," | "],["'jpeg'"," | "],["'png'"," | "],["'webp'"," | "],["'gif'"]]],"meta":{"line":163,"file":"constants.ts","path":"src"}},{"name":"EditMessageOptions","meta":{"line":16,"file":"context.ts","path":"src"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["any",">"]]]}]},{"name":"FollowUpMessageOptions","meta":{"line":25,"file":"context.ts","path":"src"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["any",">"]]]},{"name":"flags","description":"The flags to use in the message.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"tts","description":"Whether to use TTS for the content.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"MessageOptions","meta":{"line":32,"file":"context.ts","path":"src"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["any",">"]]]},{"name":"ephemeral","description":"Whether or not the message should be ephemeral.\nIgnored if `flags` is defined.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"flags","description":"The flags to use in the message.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"includeSource","description":"Whether or not to include the source of the interaction in the message.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"tts","description":"Whether to use TTS for the content.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ConvertedOption","type":[[["{} | "],["string"," | "],["number"," | "],["boolean"]]],"meta":{"line":14,"file":"context.ts","path":"src"}},{"name":"SlashCreatorEvents","meta":{"line":22,"file":"creator.ts","path":"src"},"props":[{"name":"commandBlock","type":[[["("],["command",": "],["SlashCommand",", "],["ctx",": "],["CommandContext",", "],["reason",": "],["string",", "],["data",": "],["any",") => "],["void"]]]},{"name":"commandError","type":[[["("],["command",": "],["SlashCommand",", "],["err",": "],["Error",", "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"commandRegister","type":[[["("],["command",": "],["SlashCommand",", "],["creator",": "],["SlashCreator",") => "],["void"]]]},{"name":"commandRun","type":[[["("],["command",": "],["SlashCommand",", "],["promise",": "],["Promise","<"],["any",">, "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"debug","type":[[["("],["message",": "],["string",") => "],["void"]]]},{"name":"error","type":[[["("],["err",": "],["Error",") => "],["void"]]]},{"name":"ping","type":[[["(..."],["args",": "],["unknown","[]) => "],["void"]]]},{"name":"rawREST","type":[[["("],["request",": "],["RawRequest",") => "],["void"]]]},{"name":"synced","type":[[["(..."],["args",": "],["unknown","[]) => "],["void"]]]},{"name":"unknownInteraction","type":[[["("],["interaction",": "],["any",") => "],["void"]]]},{"name":"unverifiedRequest","type":[[["("],["treq",": "],["TransformedRequest",") => "],["void"]]]},{"name":"warn","type":[[["("],["warning",": "],["Error"," | "],["string",") => "],["void"]]]}]},{"name":"SlashCreatorOptions","meta":{"line":37,"file":"creator.ts","path":"src"},"props":[{"name":"agent","description":"A HTTP Agent used to proxy requests","optional":true,"type":[[["HTTPS","."],["Agent"]]]},{"name":"allowedMentions","description":"The default allowed mentions for all messages","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"applicationID","description":"Your Application's ID","type":[[["string"]]]},{"name":"defaultImageFormat","description":"The default format to provide user avatars in.","optional":true,"type":[[["ImageFormat"]]]},{"name":"defaultImageSize","description":"The default image size to provide user avatars in.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"endpointPath","description":"The path where the server will listen for interactions.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"latencyThreshold","description":"The average latency where SlashCreate will start emitting warnings for.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"maxSignatureTimestamp","description":"A number of milliseconds before requests with a timestamp past that time get rejected.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"publicKey","description":"The public key for your application","type":[[["string"]]]},{"name":"ratelimiterOffset","description":"A number of milliseconds to offset the ratelimit timing calculations by.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"requestTimeout","description":"A number of milliseconds before requests are considered timed out.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"serverHost","description":"The host where the server will listen on.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"serverPort","description":"The port where the server will listen on.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"token","description":"The bot/client token for the application. Recommended to set.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"unknownCommandResponse","description":"Whether to respond to an unknown command with an ephemeral message.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"SyncCommandOptions","meta":{"line":70,"file":"creator.ts","path":"src"},"props":[{"name":"deleteCommands","description":"Whether to delete commands that do not exist in the creator.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"skipGuildErrors","description":"Whether to skip over guild syncing errors.\nGuild syncs most likely can error if that guild no longer exists.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"syncGuilds","description":"Whether to sync guild-specific commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"Response","meta":{"line":17,"file":"server.ts","path":"src"},"props":[{"name":"body","optional":true,"type":[[["any"]]]},{"name":"headers","optional":true,"type":[[["undefined"," | {}"]]]},{"name":"status","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"ServerOptions","meta":{"line":5,"file":"server.ts","path":"src"},"props":[{"name":"alreadyListening","type":[[["boolean"]]]}]},{"name":"TransformedRequest","meta":{"line":10,"file":"server.ts","path":"src"},"props":[{"name":"body","type":[[["any"]]]},{"name":"headers","type":[[["{}"]]]},{"name":"request","type":[[["any"]]]},{"name":"response","type":[[["any"]]]}]},{"name":"InteractionHandler","type":[[["("],["interaction",": "],["AllRequestData",") => "],["void"]]],"meta":{"line":27,"file":"server.ts","path":"src"},"params":[{"name":"interaction","type":[[["AllRequestData"]]]}],"returns":[[["void"]]]},{"name":"RequestHandler","type":[[["("],["treq",": "],["TransformedRequest",", "],["respond",": "],["RespondFunction",") => "],["void"]]],"meta":{"line":25,"file":"server.ts","path":"src"},"params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["void"]]]},{"name":"RespondFunction","type":[[["("],["response",": "],["Response",") => "],["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"server.ts","path":"src"},"params":[{"name":"response","type":[[["Response"]]]}],"returns":[[["Promise","<"],["void",">"]]]},{"name":"FastifyOpts","type":[[["Fastify","."],["FastifyServerOptions","<"],["any",", "],["FastifyLoggerInstance","> | "],["Fastify","."],["FastifyHttpsOptions","<"],["any",", "],["FastifyLoggerInstance","> | "],["Fastify","."],["FastifyHttp2Options","<"],["any",", "],["FastifyLoggerInstance","> | "],["Fastify","."],["FastifyHttp2SecureOptions","<"],["any",", "],["FastifyLoggerInstance",">"]]],"meta":{"line":4,"file":"fastify.ts","path":"src/servers"}},{"name":"EventHandler","type":[[["("],["handler",": "],["InteractionHandler",") => "],["void"]]],"meta":{"line":3,"file":"gateway.ts","path":"src/servers"},"params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]]},{"name":"MessageData","meta":{"line":5,"file":"message.ts","path":"src/structures"},"props":[{"name":"attachments","type":[[["Array","<"],["any",">"]]]},{"name":"author","type":[[["UserObject"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"content","type":[[["string"]]]},{"name":"edited_timestamp","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","type":[[["Array","<"],["any",">"]]]},{"name":"flags","type":[[["number"]]]},{"name":"id","type":[[["string"]]]},{"name":"mention_everyone","type":[[["boolean"]]]},{"name":"mention_roles","type":[[["Array","<"],["string",">"]]]},{"name":"mentions","type":[[["Array","<"],["string",">"]]]},{"name":"pinned","type":[[["boolean"]]]},{"name":"timestamp","type":[[["string"]]]},{"name":"tts","type":[[["boolean"]]]},{"name":"type","type":[[["number"]]]},{"name":"webhook_id","type":[[["string"]]]}]},{"name":"FormattedAllowedMentions","meta":{"line":36,"file":"util.ts","path":"src"},"props":[{"name":"parse","type":[[["Array","<"],["'everyone'"," | "],["'roles'"," | "],["'users'",">"]]]},{"name":"roles","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["Array","<"],["string",">"]]]}]},{"name":"MessageAllowedMentions","meta":{"line":30,"file":"util.ts","path":"src"},"props":[{"name":"everyone","type":[[["boolean"]]]},{"name":"roles","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]}]},{"name":"BitFieldResolvable","type":[[["string"," | "],["number"," | "],["BitField"," | "],["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":1,"file":"bitfield.ts","path":"src/util"}},{"name":"LatencyRef","meta":{"line":9,"file":"requestHandler.ts","path":"src/util"},"props":[{"name":"lastTimeOffsetCheck","type":[[["number"]]]},{"name":"latency","type":[[["number"]]]},{"name":"offset","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"raw","type":[[["Array","<"],["number",">"]]]},{"name":"timeOffset","type":[[["number"]]]},{"name":"timeOffsets","type":[[["Array","<"],["number",">"]]]}]},{"name":"LatencyRef","meta":{"line":1,"file":"sequentialBucket.ts","path":"src/util"},"props":[{"name":"latency","type":[[["number"]]]},{"name":"offset","optional":true,"type":[[["undefined"," | "],["number"]]]}]}]}